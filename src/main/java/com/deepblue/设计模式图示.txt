Adapter   模式: 用于填补 现有情况 和 目标情况 差异 的模式 叫适配器模式!

Prototype 模式: 原型模式注意 Cloneable 接口是类的一种标识, clone() 方法是浅复制!

Bridge    模式: 一条小河隔开了两个岸边, 现在需要一座桥进行连接!
    思维模型: 功能 + 实现 = 完整的方法
        类的功能层次: 方法是否增加
        类的实现层次: 在哪里实现

strategy  模式: 整体地替换算法, 核心关键: 处理同一个问题的不同解决方法!

Proxy 模式:
    动态代理: jdk   Subject subject = Proxy.newProxyInstance(); 必须要有接口, 必须有实现!
    静态代理: cglib Subject subject = Enhancer.create();        没必要有接口, 必须有实现!
